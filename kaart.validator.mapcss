meta
{
	title: "Validation rules for Kaart Group";
	version: "2018-11-07"
	description: "Check surfaces on roads that are residential and above, that _link destination:ref tags exist when it has a ref"
	author: "Taylor Smock";
}
/* Check that roads have surfaces */
way[highway=~/^(motorway|trunk|primary|secondary|tertiary|residential)$/][!surface]{
group: tr("kaart");
throwWarning: tr("Missing surface on road");
}

/* Check that roads have lanes */
way[highway=~/^(motorway|trunk|primary|secondary|tertiary|motorway_link|trunk_link|primary_link|secondary_link|tertiary_link)$/][!lanes][!lanes:forward][!lanes:backward]{
group: tr("kaart");
throwWarning: tr("Missing lanes on road");
}

/* Check *_links to make certain they have destination:ref */
way[highway=~/^.*_link$/][ref][!destination:ref] {
group: tr("kaart");
throwWarning: tr("Link has ref but no destination:ref");
fixChangeKey: "ref => destination:ref";
}

/* Check *_links to seeif they have a oneway tag */
way[highway=~/^.*_link$/][!oneway] {
group: tr("kaart");
throwWarning: tr("Links are usually oneways");
}

way[highway=~/^.*_link$/] > node {set .is_in_link}
way[highway =~ /^(bus_guideway|living_street|motorway|motorway_link|pedestrian|primary|primary_link|raceway|residential|road|secondary|secondary_link|service|tertiary|tertiary_link|track|trunk|trunk_link|unclassified)$/] > node { set .is_in_major_road }
way[highway =~ /^(service)$/] > node { set .is_in_minor_road }

/* Mark _links without destination:ref */
way[highway=~/^.*_link$/][!destination:ref][!destination][!destination:street] {
group: tr("kaart");
throwWarning: tr("Link has no destination/:street/:ref tag");
}

/* Mark gas stations without a brand but with a common brand name */
*[amenity=fuel][name=~/(BP|Caltex|Engen|Sasol|Shell|Total)$/][!brand] {
group: tr("kaart");
throwWarning: tr("Gas station has a name but no brand");
fixChangeKey: "name => brand";
}

/* Mark gas stations without a brand */
*[amenity=fuel][name][!brand] {
group: tr("kaart");
throwWarning: tr("Gas station has a name but no brand");
}

/* Checks for roundabouts */
way[junction=roundabout] > node {set .is_in_roundabout}
way[highway][oneway!=yes][junction!=roundabout] > node.is_in_roundabout {
group: tr("kaart");
throwWarning: tr("Highway connecting to roundabout is NOT a oneway");
}

/* Check destination lane tagging */
/* Check toll roads */
*[destination:ref:lanes=~/(.*)toll(.*)$/] {
group: tr("kaart");
throwWarning: tr("Toll roads in destination:ref:lanes are lower case, instead of upper case");
fixAdd: concat("destination:ref:lanes=", replace(tag("destination:ref:lanes"), "toll", "Toll"));
}
*[destination:ref=~/(.*)toll(.*)$/] {
group: tr("kaart");
throwWarning: tr("Toll roads in destination:ref are lower case, instead of upper case");
fixAdd: concat("destination:ref=", replace(tag("destination:ref"), "toll", "Toll"));
}

/* Check bridge tagging */
way[bridge][!layer] {
group: tr("kaart");
throwWarning: tr("Bridges should have a layer");
fixAdd: "layer=1";
}

/* Check mini-roundabouts for the correct direction */
node[highway=mini_roundabout][direction!=clockwise]!:righthandtraffic {
group: tr("kaart");
throwWarning: tr("Mini-roundabouts should have a clockwise direction in this country");
fixAdd: "direction=clockwise";
}
node[highway=mini_roundabout][direction!=anticlockwise]:righthandtraffic {
group: tr("kaart");
throwWarning: tr("Mini-roundabouts should have a anticlockwise direction in this country");
fixAdd: "direction=anticlockwise";
}
