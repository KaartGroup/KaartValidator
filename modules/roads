/****************
 ** Roads *******
 ****************/
/* Check roads for construction tags */
way[highway][construction][highway!=construction]:modified {
  group: tr("kaart");
  throwWarning: tr("Is this road still under construction?");
}

/* throw error on oneway=-1 */
way[oneway=-1] {
  group: tr("kaart");
  throwError: tr("oneway should not be -1");
  suggestAlternative: tr("oneway=yes and reverse the way");
}
@supports (min-josm-version: 14802) {
/* Check that roads have surfaces */
  way[highway=~/^(motorway|trunk|primary|secondary|tertiary|residential|unclassified)$/][!surface][gpx_distance() < 30 || gpx_distance() >= 50000000],
  way[highway=~/^.*_link$/][!surface][gpx_distance() < 30 || gpx_distance() >= 50000000] {
    group: tr("kaart");
    throwWarning: tr("Missing surface on a road");
  }
  way[highway=~/^(service|living_street)$/][!surface][gpx_distance() < 30 || gpx_distance() >= 50000000] {
    group: tr("kaart");
    throwOther: tr("Missing surface on a minor road");
  }
  way[highway=~/^(motorway|trunk|primary|secondary|tertiary|residential)$/][surface=paved][gpx_distance() < 30 || gpx_distance() >= 50000000],
  way[highway=~/^(pedestrian)$/][name][surface=paved][gpx_distance() < 30 || gpx_distance() >= 50000000],
  way[highway=~/^.*_link$/][surface=paved][gpx_distance() < 30 || gpx_distance() >= 50000000] {
    group: tr("kaart");
    throwWarning: tr("Generic paved surface on road");
  }
  /* Check that roads have lanes */
  way[highway=~/^(motorway|trunk|primary|secondary|tertiary|motorway_link|trunk_link|primary_link|secondary_link|tertiary_link)$/][!lanes][surface!~/^(gravel|ground)$/][gpx_distance() < 30 || gpx_distance() >= 50000000] {
    group: tr("kaart");
    throwWarning: tr("Missing lanes on road");
  }

  /* Check implied motorway tags */
  way[highway=~/^(motorway|motorway_link)$/][!oneway][!junction=roundabout][gpx_distance() < 30 || gpx_distance() >= 50000000] {
    group: tr("kaart");
    throwWarning: tr("{0} is typically {1}", "{0.tag}", "{1.key}");
    suggestAlternative: "oneway=yes";
  }
  way[highway=~/^(motorway|motorway_link)$/][!access][gpx_distance() < 30 || gpx_distance() >= 50000000] {
    group: tr("kaart");
    throwOther: tr("{0} is typically reserved for motor_vehicles", "{0.tag}");
    suggestAlternative: "access=no with motor_vehicle=yes";
  }
  /* Check that turn:lanes/:forward/:backward */
  way[highway][turn:lanes][!/^(oneway|junction)$/][gpx_distance() < 30 || gpx_distance() >= 50000000] {
    group: tr("kaart");
    throwWarning: tr("turn:lanes without oneway -- are turn lanes the same in both directions?");
  }
  way[highway][turn:lanes][turn:lanes:forward][gpx_distance() < 30 || gpx_distance() >= 50000000],
  way[highway][turn:lanes][turn:lanes:backward][gpx_distance() < 30 || gpx_distance() >= 50000000] {
    group: tr("kaart");
    throwError: tr("{0} and a directional {1}", "{1.tag}", "{2.tag}");
  }
  way[highway][turn:lanes][/^(oneway|junction)$/][count(split("|", tag("turn:lanes"))) != tag("lanes")][gpx_distance() < 30 || gpx_distance() >= 50000000],
  way[highway][turn:lanes][!/^(oneway|junction)$/][2 * count(split("|", tag("turn:lanes"))) != tag("lanes")][gpx_distance() < 30 || gpx_distance() >= 50000000],
  way[highway][turn:lanes][!lanes] {
    group: tr("kaart");
    throwWarning: tr("{0} do not match {1}", "{1.key}", "lanes");
  }
  way[highway][turn:lanes:forward][lanes:forward][count(split("|", key("turn:lanes:forward"))) != key("lanes:forward")][gpx_distance() < 30 || gpx_distance() >= 50000000],
  way[highway][turn:lanes:forward][!lanes:forward][count(split("|", key("turn:lanes:forward"))) != key("lanes") / 2][gpx_distance() < 30 || gpx_distance() >= 50000000],
  way[highway][turn:lanes:forward][!lanes][!lanes:forward][gpx_distance() < 30 || gpx_distance() >= 50000000] {
    group: tr("kaart");
    throwWarning: tr("{0} do not match lanes:forward", "{1.key}");
  }
  way[highway][turn:lanes:backward][lanes:backward][count(split("|", key("turn:lanes:backward"))) != key("lanes:backward")][gpx_distance() < 30 || gpx_distance() >= 50000000],
  way[highway][turn:lanes:backward][!lanes:backward][count(split("|", key("turn:lanes:backward"))) != key("lanes") / 2][gpx_distance() < 30 || gpx_distance() >= 50000000],
  way[highway][turn:lanes:backward][!lanes][!lanes:backward][gpx_distance() < 30 || gpx_distance() >= 50000000] {
    group: tr("kaart");
    throwwarning: tr("{0} do not match lanes:backward", "{1.key}");
  }
}

/* Look for highway=* that is not service but has service=* */
*[highway][highway!=service][service] {
  group: tr("kaart");
  throwError: tr("Non-service roads should not have a service tag in most cases");
  suggestAlternative: tr("{0} or remove the {1} tag", "highway=service", "service");
}

/* Look for possible highways without highway tags */
way[!/^(.*:)*(highway|railway)$/][/^.*(lanes|maxspeed|maxweight|maxheight|maxwidth|turn).*$/][!/^aeroway$/],
way[!/^(.*:)*(highway|railway)$/][/^(surface)$/][!/^amenity|leisure|aeroway|natural$/][place!=square] {
  group: tr("kaart");
  throwError: tr("Is this a {0} -- it has a {1} tag", "{0.key}", "{1.key}");
  assertMatch: "way surface=asphalt";
  assertNoMatch: "way disused:highway=residential surface=asphalt";
}

node[/^.*(lanes|turn|surface).*$/],
node[/^.*(maxspeed|maxweight|maxheight|maxwidth).*$/][!/^(traffic_sign|parking|barrier|traffic_calming)$/][!highway=speed_camera] {
  group: tr("kaart");
  throwError: tr("Nodes typically don''t have {0}", "{0.key}");
  fixRemove: "{0.key}";
  assertMatch: "node lanes=3";
  assertNoMatch: "node name=Me";
}

way[highway=~/^(motorway|motorway_link)$/][access=no][!motor_vehicle] {
  group: tr("kaart");
  throwOther: tr("{0} is typically accessible to motor_vehicles", "{0.tag}");
  suggestAlternative: "motor_vehicle=yes";
}

/* Check lanes from way to way (ONLY TWO WAYS) TODO check patches */
/* node[count(parent_osm_ids()) = 2 && count(parent_osm_ids("lanes")) != 0 && get(parent_osm_ids("lanes"),0) != get(parent_osm_ids("lanes"),1) && (regexp_match("(slight_right|slight_left|right|left)", get(parent_osm_ids("turn:lanes"))) != null )] {
 } */

way[highway][turn],
way[highway][turn:forward],
way[highway][turn:backward],
way[highway][turn:both_ways] {
  group: tr("kaart");
  throwWarning: tr("We shouldn''t be using turn:<direction>");
  suggestAlternative: tr("turn:lanes:<direction>");
}

/* Check for turn lanes that are definately wrong */
way[highway][/turn:lanes/][/turn:lanes/!~/^(none[|;]?)*((reverse|merge_to_right|left)[|;]?)*((merge_to_right|slight_left)[|;]?)*[|]*((through|none)[|;]?)*[|]*((slight_right|merge_to_left)[|;]?)*((right|merge_to_left)[|;]?)*(none[|;]?)*$/]:righthandtraffic {
  group: tr("kaart");
  throwError: tr("Check the order of {0}", "{1.key}");
  assertMatch: "way highway=tertiary turn:lanes=\"through|reverse\"";
  assertNoMatch: "way highway=tertiary turn:lanes=\"reverse|left|merge_to_right|through\"";
  assertNoMatch: "way highway=motorway turn:lanes=through|through|through;slight_right|none";
}

@supports (min-josm-version: 14802) {
/* Check *_links to see if they have a oneway tag */
  way[highway=~/^.*_link$/][!oneway][gpx_distance() < 30 || gpx_distance() >= 50000000] {
    group: tr("kaart");
    throwError: tr("_links are usually {0}", "{1.key}");
    suggestAlternative: "oneway";
  }
}

/* Check links to make certain they match the road they are going to TODO */
way[highway=~/^.*_link$/][oneway=yes] >[index=-1] node { set .end_of_link }
way[highway=~/^.*_link$/][oneway=yes] >[index=1] node { set .start_of_link }
node.end_of_link, node.start_of_link { set .link }
way[highway=motorway] > node.link { set .motorway }
way[highway=motorway_link] > node.link { set .motorway_link }
way[highway=trunk] > node.link { set .trunk }
way[highway=trunk_link] > node.link { set .trunk_link }
way[highway=primary] > node.link { set .primary }
way[highway=primary_link] > node.link { set .primary_link }
way[highway=secondary] > node.link { set .secondary }
way[highway=secondary_link] > node.link { set .secondary_link }
way[highway=tertiary] > node.link { set .tertiary }
way[highway=tertiary_link] > node.link { set .tertiary_link }

node.motorway!.motorway_link,
node.trunk!.motorway_link!.trunk_link,
node.primary!.motorway_link!.trunk_link!.primary_link,
node.secondary!.motorway_link!.trunk_link!.primary_link!.secondary_link,
node.tertiary!.motorway_link!.trunk_link!.primary_link!.secondary_link!.tertiary_link {
  group: tr("kaart");
  throwWarning: tr("Check the link and the highest road it goes to/comes from");
}

way >[index=-1] node {
  set .end_of_way
}
way >[index=1] node {
  set .start_of_way
}

/* Check that specific types of roads have refs and names */
way[highway][ref] > node { set .nodeHasRef }
@supports (min-josm-version: 14802) {
  way[highway=~/^(motorway|trunk|primary|secondary)$/][!ref][gpx_distance() < 30 || gpx_distance() >= 50000000] > node { set .nodeNoRef }

  node.nodeHasRef.nodeNoRef {
    group: tr("kaart");
    throwWarning: tr("A road may be missing a ref");
  }

  /* Check for erroneous maxspeed */
  way[highway][/^(?!maxspeed:type|maxspeed:variable)maxspeed/][/^maxspeed/!~/^((\d{0,2}[0,5]( mph| knots)?)|none|walk|signals|\p{Lu}{2}:(\p{Ll}|:)*)$/][gpx_distance() < 30 || gpx_distance() >= 50000000] {
    group: tr("kaart");
    throwError: tr("Unknown maxspeed -- check the maxspeeds");
  }
  way[highway][inside("US")][/^(?!maxspeed:type|maxspeed:variable)maxspeed/][/^maxspeed/!~/^((\d{0,2}[0,5] mph)|none|walk|signals|\p{Lu}{2}:(\p{Ll}|:)*)$/][gpx_distance() < 30 || gpx_distance() >= 50000000] {
    group: tr("kaart");
    throwError: tr("{0} should be in mph in the US, try adding mph to {0}", "{3.key}");
  }
}

/* Traffic sign checks */
node[traffic_sign][maxspeed][tag("maxspeed") != parent_tag("maxspeed")][!/^(direction|traffic_sign:(forward|backward))$/],
node[traffic_sign][maxspeed][tag("maxspeed") != parent_tag("maxspeed:forward") || count(parent_tags("maxspeed:forward")) == 0 && tag("maxspeed") != parent_tag("maxspeed")][traffic_sign:forward?],
node[traffic_sign][maxspeed][tag("maxspeed") != parent_tag("maxspeed:backward") || count(parent_tags("maxspeed:backward")) == 0 && tag("maxspeed") != parent_tag("maxspeed")][traffic_sign:backward?],
node[traffic_sign][maxweight][tag("maxweight") != parent_tag("maxweight")][!/^(direction|traffic_sign:(forward|backward))$/],
node[traffic_sign][maxweight][tag("maxweight") != parent_tag("maxweight:forward") || count(parent_tags("maxweight:forward")) == 0 && tag("maxweight") != parent_tag("maxweight")][traffic_sign:forward?],
node[traffic_sign][maxweight][tag("maxweight") != parent_tag("maxweight:backward") || count(parent_tags("maxweight:backward")) == 0 && tag("maxweight") != parent_tag("maxweight")][traffic_sign:backward?],
node[traffic_sign][maxheight][tag("maxheight") != parent_tag("maxheight")][!/^(direction|traffic_sign:(forward|backward))$/],
node[traffic_sign][maxheight][tag("maxheight") != parent_tag("maxheight:forward") || count(parent_tags("maxheight:forward")) == 0 && tag("maxheight") != parent_tag("maxheight")][traffic_sign:forward?],
node[traffic_sign][maxheight][tag("maxheight") != parent_tag("maxheight:backward") || count(parent_tags("maxheight:backward")) == 0 && tag("maxheight") != parent_tag("maxheight")][traffic_sign:backward?],
node[traffic_sign][maxlength][tag("maxlength") != parent_tag("maxlength")][!/^(direction|traffic_sign:(forward|backward))$/],
node[traffic_sign][maxlength][tag("maxlength") != parent_tag("maxlength:forward") || count(parent_tags("maxlength:forward")) == 0 && tag("maxlength") != parent_tag("maxlength")][traffic_sign:forward?],
node[traffic_sign][maxlength][tag("maxlength") != parent_tag("maxlength:backward") || count(parent_tags("maxlength:backward")) == 0 && tag("maxlength") != parent_tag("maxlength")][traffic_sign:backward?],
node[traffic_sign][overtaking][tag("overtaking") != parent_tag("overtaking")][!/^(direction|traffic_sign:(forward|backward))$/],
node[traffic_sign][overtaking][tag("overtaking") != parent_tag("overtaking:forward") || count(parent_tags("overtaking:forward")) == 0 && tag("overtaking") != parent_tag("overtaking")][traffic_sign:forward?],
node[traffic_sign][overtaking][tag("overtaking") != parent_tag("overtaking:backward") || count(parent_tags("overtaking:backward")) == 0 && tag("overtaking") != parent_tag("overtaking")][traffic_sign:backward?] {
  group: tr("kaart");
  throwWarning: tr("{0} on {1} does not match {2} on parent way", "{1.key}", "{0.key}", "{1.key}");
}

node[traffic_sign][maxspeed][count(parent_tags("maxspeed")) == 0][!/^(direction|traffic_sign:(forward|backward))$/],
node[traffic_sign][maxspeed][count(parent_tags("maxspeed:forward")) == 0 && count(parent_tags("maxspeed")) == 0][traffic_sign:forward?],
node[traffic_sign][maxspeed][count(parent_tags("maxspeed:backward")) == 0 && count(parent_tags("maxspeed")) == 0][traffic_sign:backward?],
node[traffic_sign][maxweight][count(parent_tags("maxweight")) == 0][!/^(direction|traffic_sign:(forward|backward))$/],
node[traffic_sign][maxweight][count(parent_tags("maxweight:forward")) == 0 && count(parent_tags("maxweight")) == 0][traffic_sign:forward?],
node[traffic_sign][maxweight][count(parent_tags("maxweight:backward")) == 0 && count(parent_tags("maxweight")) == 0][traffic_sign:backward?],
node[traffic_sign][maxheight][count(parent_tags("maxheight")) == 0][!/^(direction|traffic_sign:(forward|backward))$/],
node[traffic_sign][maxheight][count(parent_tags("maxheight:forward")) == 0 && count(parent_tags("maxheight")) == 0][traffic_sign:forward?],
node[traffic_sign][maxheight][count(parent_tags("maxheight:backward")) == 0 && count(parent_tags("maxheight")) == 0][traffic_sign:backward?],
node[traffic_sign][maxlength][count(parent_tags("maxlength")) == 0][!/^(direction|traffic_sign:(forward|backward))$/],
node[traffic_sign][maxlength][count(parent_tags("maxlength:forward")) == 0 && count(parent_tags("maxlength")) == 0][traffic_sign:forward?],
node[traffic_sign][maxlength][count(parent_tags("maxlength:backward")) == 0 && count(parent_tags("maxlength")) == 0][traffic_sign:backward?],
node[traffic_sign][overtaking][count(parent_tags("overtaking")) == 0][!/^(direction|traffic_sign:(forward|backward))$/],
node[traffic_sign][overtaking][count(parent_tags("overtaking:forward")) == 0 && count(parent_tags("overtaking")) == 0][traffic_sign:forward?],
node[traffic_sign][overtaking][count(parent_tags("overtaking:backward")) == 0 && count(parent_tags("overtaking")) == 0][traffic_sign:backward?] {
  group: tr("kaart");
  throwWarning: tr("{0} on {1} does not exist on parent way", "{1.key}", "{0.key}");
}

/* Check for areas that should have units on maxweight */
*[maxweight][maxweight=~/^[0-9.]+$/][inside("US")],
*[maxaxleload][maxaxleload=~/^[0-9.]+$/][inside("US")] {
  group: tr("kaart");
  throwError: tr("{0} is always in short tons (st)", "{0.key}");
}

/* Check *_links to see if they have a name/noname tag */
way[highway=~/^.*_link$/][name],
way[highway=~/^.*_link$/][noname] {
  group: tr("kaart");
  throwWarning: tr("Links shouldn''t have name/noname tags");
}
@supports (min-josm-version: 14802) {
  /* Bring pedestrian crossings forward */
  node[highway=crossing][!crossing][gpx_distance() < 30 || gpx_distance() >= 50000000]:in-downloaded-area {
    group: tr("kaart");
    throwWarning: tr("A highway crossing does not have a crossing type");
  }
  node[highway=crossing][crossing][crossing!~/^(traffic_signals|uncontrolled|no|unmarked|zebra|pelican|tiger|toucan|pegasus|island)$/][gpx_distance() < 30 || gpx_distance() >= 50000000]:in-downloaded-area {
    group: tr("kaart");
    throwWarning: tr("A highway crossing is using an unknown crossing type ({0})", tag("crossing"));
    assertNoMatch: "node highway=crossing crossing=traffic_signals";
    assertNoMatch: "node highway=crossing crossing=uncontrolled";
    assertNoMatch: "node highway=crossing crossing=unmarked";
    assertNoMatch: "node highway=crossing crossing=no";
    /* assertMatch: "node highway=crossing crossing=bad_crossing"; TODO figure out why this errors */
  }

  node[highway=crossing][crossing=island][gpx_distance() < 30 || gpx_distance() >= 50000000] {
    group: tr("kaart");
    throwWarning: tr("{0} is no longer recommended, due to conflicting with unmarked/uncontrolled/traffic_signals", "{1.tag}");
    suggestAlternative: "crossing:island=yes";
    fixRemove: "crossing";
    fixAdd: "crossing:island=yes";
  }

  node[highway=crossing][crossing=~/^(zebra|pelican|tiger|toucan|pegasus)$/][gpx_distance() < 30 || gpx_distance() >= 50000000]:in-downloaded-area {
    group: tr("kaart");
    throwWarning: tr("A highway crossing is using an unclear crossing type that should be in crossing_ref");
    fixChangeKey: "crossing => crossing_ref";
  }
}

/* Look for intersections of railways and highways */
way[railway][highway] > node {
  set .in_railway_highway;
}

way[railway][railway!~/^(disused|abandoned|dismantled|razed|historic)$/] > node { set .in_railway }
way[highway][highway!~/^(pedestrian|footway)$/] > node { set .in_highway }
way[highway][highway=~/^(pedestrian|footway)$/] > node { set .in_pedestrian_highway }
/* Mark some tram nodes as in the Balkans since they don't want level_crossing on those nodes */

/* CS not a valid country, as far as JOSM is concerned */
way[railway][railway=tram][inside("AL,BA,BG,MK,HR,GR,IT,RO,RS,SI,TR")] > node { set .in_balkans }

@supports (min-josm-version: 14802) {
  node[railway!=level_crossing][gpx_distance() < 30 || gpx_distance() >= 50000000].in_railway.in_highway!.in_railway_highway!.in_balkans {
    group: tr("kaart");
    throwWarning: tr("There should be a crossing of some type here");
    suggestAlternative: "railway=level_crossing"
  }

  node[railway!~/^(level_crossing|crossing|station|tram_stop|subway_entrance)$/][gpx_distance() < 30 || gpx_distance() >= 50000000].in_railway.in_pedestrian_highway!.in_balkans {
    group: tr("kaart");
    throwWarning: tr("There should be a crossing of some type here");
    suggestAlternative: "railway=crossing"
  }
}

/* Check that way that is ONLY connecting crossings is a footway TODO */
/*way[highway!=footway][!name] >[index=-1] node[highway=crossing] >[index=1] node[highway=crossing] {
  group: tr("kaart");
  throwWarning: tr("This should probably be a footway");
}*/

/* Check *_links and streets to find ways that split-end into _links TODO */
way[highway=~/^.*_link$/][oneway=no] >[index=-1] node,
way[highway=~/^.*_link$/][oneway=no] >[index=1] node{
  set .end_of_twoway_link
}
way[highway!~/^.*_link$/][name] >[index=-1] node,
way[highway!~/^.*_link$/][name] >[index=1] node {
  set .end_of_road
}

way[highway=~/^.*_link$/] > node {set .is_in_link}
way[highway =~ /^(bus_guideway|living_street|motorway|motorway_link|pedestrian|primary|primary_link|raceway|residential|road|secondary|secondary_link|service|tertiary|tertiary_link|track|trunk|trunk_link|unclassified)$/] > node { set .is_in_major_road }
way[highway =~ /^(service)$/] > node { set .is_in_minor_road }

/* Check bridge tagging */
way[highway][bridge][!layer] {
  group: tr("kaart");
  throwWarning: tr("Bridges should have a layer");
}
way|z21-[JOSM_search("inview")][highway][bridge][!layer] {
  group: tr("kaart");
  throwWarning: tr("Bridges should have a layer");
  fixAdd: "layer=1";
}

@supports (min-josm-version: 14802) {
  /* Check for potential road restrictions */
  way[highway][bridge][!maxweight][gpx_distance() < 30 || gpx_distance() >= 50000000] {
    group: tr("kaart");
    throwOther: tr("Bridges may have a maxweight");
    suggestAlternative: "maxweight";
  }
  /* TODO fix */
  way[highway][bridge] ⧉ way[highway][!bridge][!maxheight][gpx_distance() < 30 || gpx_distance() >= 50000000] {
    group: tr("kaart");
    throwOther: tr("Ways under bridges occassionally have a maxheight attribute. Check on ground for the information (or OpenStreetCam/Mapillary)");
    suggestAlternative: "maxheight";
  }
}

way[highway][maxheight=~/^\d+'\s\d+"$/] {
  group: tr("kaart");
  throwWarning: tr("maxheight is not properly formatted for feet and inches");
}
way|z21-[JOSM_search("inview")][highway][maxheight=~/^\d+'\s\d+"$/] {
  group: tr("kaart");
  throwWarning: tr("maxheight is not properly formatted for feet and inches");
  fixAdd: tr("{0}={1}", "maxheight", replace(tag("maxheight"), " ", ""));
}

@supports (min-josm-version: 14802) {
  way[highway][tunnel][gpx_distance() < 30 || gpx_distance() >= 50000000] {
    group: tr("kaart");
    throwOther: tr("Tunnels may have a maxheight");
    suggestAlternative: "maxheight";
  }
}

/* Check mini-roundabouts for the correct direction */
node[highway=mini_roundabout][direction!=clockwise][JOSM_search("-inview")]!:righthandtraffic:in-downloaded-area,
node|z-20[highway=mini_roundabout][direction!=clockwise]!:righthandtraffic:in-downloaded-area {
  group: tr("kaart");
  throwWarning: tr("Mini-roundabouts should have a clockwise direction in this country");
}

node|z21-[JOSM_search("inview")][highway=mini_roundabout][direction!=clockwise]!:righthandtraffic:in-downloaded-area {
  group: tr("kaart");
  throwWarning: tr("Mini-roundabouts should have a clockwise direction in this country");
  /*fixAdd: "direction=clockwise";*/
}

node[highway=mini_roundabout][direction!=anticlockwise][JOSM_search("-inview")]:righthandtraffic:in-downloaded-area,
node|z-20[highway=mini_roundabout][direction!=anticlockwise]:righthandtraffic:in-downloaded-area {
  group: tr("kaart");
  throwWarning: tr("Mini-roundabouts should have a anticlockwise direction in this country");
}

node|z21-[JOSM_search("inview")][highway=mini_roundabout][direction!=anticlockwise]:righthandtraffic:in-downloaded-area {
  group: tr("kaart");
  throwWarning: tr("Mini-roundabouts should have a anticlockwise direction in this country");
  /*fixAdd: "direction=anticlockwise";*/
}

/*****************
 * Roundabouts ***
 *****************/
/* Checks for roundabouts */
way[junction=roundabout]:in-downloaded-area > node {set .is_in_roundabout}
node[traffic_calming=island]:in-downloaded-area { set .is_traffic_calming_island}
way[highway][highway!~/^(pedestrian|footway|cycleway)$/][oneway!=yes][junction!=roundabout]:in-downloaded-area > node.is_in_roundabout!.is_traffic_calming_island {
  group: tr("kaart");
  throwWarning: tr("Highway connecting to roundabout is NOT a oneway -- check if there is a traffic_calming=island nearby");
  suggestAlternative: "split ways to have roundabout flares or add traffic_calming=island to a node using imagery"
}
way[highway][oneway!=yes][junction!=roundabout]:in-downloaded-area > node.is_in_roundabout.is_traffic_calming_island {
  group: tr("kaart");
  throwWarning: tr("The node where a roundabout and a way connect should NOT be a traffic_calming=island (the island should be on the approach, not in the roundabout)");
}

/* Check for roundabouts with MORE than 1 road entering at the same location */
way[junction=roundabout][name] > node {set .is_in_named_roundabout}
/* TODO remove the one with parent_tags as soon as parent_osm_ids is in josm-tested */
node.is_in_roundabout!.is_in_named_roundabout[count(parent_tags("name")) - count(parent_tags("landuse")) > 1]:in-downloaded-area,
node.is_in_roundabout.is_in_named_roundabout[count(parent_tags("name")) - count(parent_tags("landuse")) > 2]:in-downloaded-area {
  group: tr("kaart");
  throwWarning: tr("Roundabouts should not have more than two additional ways at any node");
}
node.is_in_roundabout[count(parent_osm_ids("highway")) - count(parent_osm_ids("junction")) > 1] {
  group: tr("kaart");
  throwError: tr("Roundabouts should not have more than two additional ways at any node");
}

/* Ways entering the roundabout should start/end there */
way[name][highway][!junction] > node.is_in_roundabout!.end_of_way!.start_of_way { set .roundabout_way_ends }
node.roundabout_way_ends {
  group: tr("kaart");
  throwWarning: tr("Way {0} does not end at roundabout", parent_tags("name"));
}

way[highway=~/(motorway|trunk|primary|secondary|tertiary|unclassified|residential|.*_link)$/][junction!=circular][junction!=roundabout]:closed {
  group: tr("kaart");
  throwWarning: tr("Possible roundabout or circular junction");
}

way[highway=~/^.*_link$/][junction] {
  group: tr("kaart");
  throwWarning: tr("{0} should not be a {1} if any of the connecting roads are not {1}s", tag("junction"), "_link");
}

relation[type=restriction][!/^restriction/] {
  group: tr("kaart");
  throwError: tr("Restriction relations should have the type of restriction");
  assertMatch: "relation type=restriction";
  assertNoMatch: "relation type=restriction restriction=no_u_turn";
  assertNoMatch: "relation type=restriction restriction:hgv=no_u_turn";
}

/* Check for ref and name being equal */
way[highway][name][ref][name = *ref] {
  throwWarning: tr("{0} and {1} are the same", "name", "ref");
  group: tr("kaart");
  assertMatch: "way highway=tertiary name=22 ref=22";
  assertNoMatch: "way highway=tertiary name=22 ref=23";
}
