meta {
  title: "Brazil Validator Tool";
  description: "Validator tool for the Kaart Brazil Project";
  version: "1_2019-06-04";
  author: "Taylor Smock (vorpalblade77-kaart), Andrew Piechota(G_Fyyar), RD Clare(mr_et), Lucas Bingham(Traaker_L)";
}

/* Creates list of Current/Past Project Users */
/* Taylor Smock. Edited by Andrew Piechota for BP */
*[JOSM_search("user:G_Fyyar or user:Meowshane or  user:mr_et or user:FarieBerrie or user:Kyleta8 or user:\"El Pescador\" or user:rytheking or user:Ajaie or user:BobGod or user:csjupiter1 or user:GhostEye or user:ArleneC or user:leedlelee or user:\"Leonardo DeMAPrio\" or user:logans127 or user:mapcraft or user:Plutocrats or user:chuck97! or user:Senzubeandealer or user:swells5 or user:notmee-uh or user:Traaker_L or user:yodacodyone1 or user:Dillon9 or user:jacob_kubeczko or user:LSkalayo or user:Traaker_L or user:MTG5093 or user:Zebulonium or user:staysavy")] {
  set .kaart_user;
}

/* Flags all notes on all highways. Also checks for notes added by Kaart Users. Will flag if Kaart user is last author and tag exists */
/* Andrew Piechota, RD Clare, Lucas Bingham */
way[highway][note][note !~ /(?i)Check Classification/],
way[highway][note][note !~ /(?i)Check Classification/].kaart_user {
  throwWarning: tr("Check if note was added to object by Kaart user");
  fixRemove: "note";
}

/* Flags notes that say Check Classification */
/* RD Clare, Lucas Bingham */
way[highway !~ /^.*_link$/][note][note =~ /(?i)Check Classification/] {
  throwWarning: tr("Check Classification");
}

/* Checks if name and alt_name are equivalent  */
/* Andrew Piechota */
way[highway][name = *alt_name] {
  throwWarning: tr("Name and alt_name are equivalent");
  fixRemove: "alt_name"; 
}

/* Check for dos|das|do|da|e|de|ou|que|o|eu|tu|ele|ela|nos|elas|eles capitalization */
/* Taylor Smock. Edited by RD Clare and Andrew Piechota for BP */
way[highway][name][/^(name|alt_name)$/ =~ /^.* (D(o|a)s|D(o|a)|E|De|Ou|Que|O|Eu|Tu|El(e|a)|El(a|e)s|Nos) .*$/][inside("BR")] {
  throwWarning: tr("Check for capitalization issues");
}

/* Checks if links have oneway tag */
/* Taylor Smock */
way[highway=~/^.*_link$/][!oneway] {
  throwWarning: tr("_links are usually {0}", "{1.key}");
  fixAdd: "oneway=yes";
}

/* Checks for commas in name/alt_name */
/* Andrew Piechota */
way[highway][/^(name|alt_name)$/ =~ /,/] {
  throwError: tr("Name/alt_name with comma");
  suggestAlternative: "an alt_name";
}

/* Checks if links have name/noname tag */
/* Taylor Smock, Andrew Piechota, RD Clare */
way[highway=~/^.*_link$/][name][!note],
way[highway=~/^.*_link$/][noname][!note] {
  throwWarning: tr("Links shouldn''t have name/noname tags");
  suggestAlternative: "a note";
  fixAdd: "note=Check Classification";
  fixRemove: "noname";
}

/* Checks for noname tag. Will flag if Kaart user is last author and tag exists */
/* RD Clare */
way[highway][noname].kaart_user {
  throwWarning: tr("Check noname tag added by Kaart user");
  fixRemove: "noname";
}

/* Checks if ref and name tag are present and if name and ref are equal. Also checks for "Rodovia REF-1000" or ref tag in name/alt_name */
/* RD Clare, Andrew Piechota */
way[highway][name][ref][name = *ref],
way[highway][/^(name|alt_name)$/ !~ / - /][/^(name|alt_name)$/ =~ /(Rodovia|Estrada|Travessa|Rua|Avenida|Alameda|Viela|Servid(a|ã)o|Acesso|Beco|Pra(c|ç)a|Caminho|Ponte|Viaduto) ([a-zA-Z]{2,3}-?[0-9]{2,4})/],
way[highway][/^(name|alt_name)$/ !~ / - /][/^(name|alt_name)$/ =~ /([a-zA-Z]{2,3}-?[0-9]{2,4})/] {
  throwWarning: tr("Name may contain ref");
}

/* Abbreviated words in name/alt_name in ways */
/* Andrew Piechota */
way[/^(name|alt_name)$/ =~ /(?i)(^|.* )(Cel|Cmte|Cond|Conj|Dª|Dr|Eng|Gov|Hab|Jd|Jr|Marg|Mun|p\/|Pde|Pe|Pq|Pst|Pref|Profa|Profª|Prof|Res|s\/|Sr(a|ª)?|Sta|Sto|Ver)\.? .*/] {
  throwWarning: tr("Abbreviated word in name/alt_name");
}

/* Checks for Antiga (old) in name/alt_name */
/* Andrew Piechota */
*[/^(name|alt_name)$/=~/(?i)antiga/] {
  throwWarning: tr("Antiga (old) in the name/alt_name");
  assertMatch: "way name=\"antiga testing\"";
  assertMatch: "way name=\"Antiga testing\"";
  assertMatch: "way name=\"Rua Sao Paulo Antiga\"";
  assertMatch: "way name=\"There are five words Antiga\"";
  assertNoMatch: "way name=\"Something else\"";
}

/* Checks for Projetada (project) in name/alt_name */
/* Andrew Piechota */
*[/^(name|alt_name)$/=~/(?i)projetada/] {
  throwWarning: tr("Projetada (project) in the name/alt_name");
  assertMatch: "way name=\"projetada testing\"";
  assertMatch: "way name=\"Projetada testing\"";
  assertMatch: "way name=\"Rua Sao Paulo Projetada\"";
  assertMatch: "way name=\"There are five words Projetada\"";
  assertNoMatch: "way name=\"Something else\"";
}

/* Checks for Sem Nome (no name) and it's variations in name/alt_name */
/* Andrew Piechota */
*[/^(name|alt_name)$/=~/(?i)sem nome/],
*[/^(name|alt_name)$/=~/SD/],
*[/^(name|alt_name)$/=~/(?i)Sem D/] {
  throwWarning: tr("Sem Nome (no name) in the name/alt_name");
  assertMatch: "way name=\"sem nome testing\"";
  assertMatch: "way name=\"SD\"";
  assertMatch: "way name=\"Sem D\"";
  assertMatch: "way name=\"Sem Nome testing\"";
  assertMatch: "way name=\"Rua Sao Paulo Sem Nome\"";
  assertMatch: "way name=\"There are six words Sem Nome\"";
  assertNoMatch: "way name=\"Something else\"";
}

/* Checks bridges/tunnels for layer tag */
/* Andrew Piechota */
way[/^(tunnel|bridge)$/][/^(tunnel|bridge)$/!~/^no$/][!layer] {
  throwWarning: tr("Bridge/tunnel missing layer tag");
}

/* Checks for ou (or) in name/alt_name */
/* Andrew Piechota */
*[/^(name|alt_name)$/ =~ / ou /] {
  throwWarning: tr("ou implies two names");
  suggestAlternative: "an alt_name";
}

/* Checks if roundabouts have the highway = _link tag */
/* RD Clare */
way[highway =~ /^.*_link$/][junction = roundabout] {
  throwWarning: tr("roundabouts are usually not links");
  suggestAlternative: "non _link or add note";
  fixAdd: "note=Check Classification";
}

/* Checks if roundabouts are oneway */
/* RD Clare */
way[highway][junction = roundabout][!oneway] {
  throwWarning: tr("roundabouts are usually oneway");
  suggestAlternative: "oneway = yes";
  fixAdd: "oneway=yes";
}

/* Roman Numeral Check */
/* RD Clare, Taylor Smock */
way[highway][/^(name|alt_name)$/][/^(name|alt_name)$/ =~ /(^|\s)(I|II|III|IV|V|VI|VII|VIII|IX|X|XI|XII|XIII|XIV|XV|XVI|XVII|XVIII|XIX|XX|XXI|XXII|XXIII|XXIV|XXV|XXVI|XXVII|XXVIII|XXIX|XXX|XXXI|M|L)(\s|$)/]{
  throwWarning: tr("Check for Roman Numerals");
  suggestAlternative: "an alt_name or update the alt_name";
}

/* Check for way added by editor without highway/waterway tag */
/* Lucas Bingham */
way[!highway][!waterway]:new {
  throwWarning: tr("Way added without highway/waterway tag");
}

/* Check ways for proper road prefixes */
/* Andrew Piechota */
way[highway][/^(name|alt_name)$/][/^(name|alt_name)$/!~/(Rodovia|Estrada|Travessa|Rua|Avenida|Alameda|Viela|Servid(a|ã)o|Acesso|Beco|Pra(c|ç)a|Caminho|Ponte|Viaduto)/],
way[highway][/^(name|alt_name)$/ =~ /(?i)(^|.* )(R|R.|Es.|Es|Est.|Est|Av|Av.|Al|Al.|T|T.|Tv|Tv.|Trav|Trav.|Cam|Cam.) \.? .*/],
way[highway][/^(name|alt_name)$/ =~ /(^|.* )(rua|beco) \.? .*/] {
  throwWarning: tr("Possible incorrect/abbreviated road prefix");
  assertMatch: "way name=\"Something else\"";
  assertMatch: "way name=\"R. Paulo\"";
  assertNoMatch: "way name=\"Rua Paulo\"";
}
