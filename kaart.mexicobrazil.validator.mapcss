meta
{
  title: "Mexico-Brazil Validation rules for Kaart Group";
  version: "98_2019-02-05";
  description: "Various checks that are useful to the Kaart Mexico-Brazil Project";
  author: "Taylor Smock";
}
/* Documentation
 * https://josm.openstreetmap.de/wiki/Help/Validator/MapCSSTagChecker
 * https://josm.openstreetmap.de/wiki/Help/Styles/MapCSSImplementation
 */

*["telenav:action"] {
  group: tr("kaart (MX/BR)");
  throwError: tr("{0} is not a valid tag", "{0.key}");
  assertMatch: "node \"telenav:action\"=new";
  assertNoMatch: "node \"telenav:baction\"=new";
  fixRemove: "telenav:action";
}

/* Check for duplicated words in names */
*[name][regexp_test("\\b(\\p{L}+)\\b(?:\\s+\\1\\b)+", tag("name"), "(?i)")] {
  group: tr("kaart (MX/BR)");
  throwWarning: tr("Possible duplicated words in {0}", "{0.key}");
  assertMatch: "node name=\"Duplicate Duplicate\"";
  assertNoMatch: "node name=\"Nothing to see here\"";
}

/* Check for del/el/a/la/las/los/al/de capitalization */
*[name][name=~/^.* (Del|El|A|La|Las|Los|Al|De) .*$/][inside("BR,MX,ES")] {
  group: tr("kaart (MX/BR)");
  throwError: tr("Check for capitalization issues");
  assertMatch: "node name=\"Donde El Lama\"";
  assertNoMatch: "node name=\"Donde el Lama\"";
  assertNoMatch: "node name=\"El Hombre\"";
  assertNoMatch: "node name=\"Hombre El\"";
}

/* Check for bridges/tunnels missing a layer tag */
way[/^(tunnel|bridge)$/][/^(tunnel|bridge)$/!~/^(no|building_passage)$/][!layer] {
  group: tr("kaart (MX/BR)");
  throwError: tr("{0} is missing a layer tag", "{0.key}");
  suggestAlternative: "layer";
  assertMatch: "way highway=residential bridge=yes";
  assertNoMatch: "way highway=residential bridge=yes layer=1";
  assertNoMatch: "way highway=residential bridge=no";
  assertNoMatch: "way highway=residential";
}

/* Check for ways with bridge AND tunnel tags */
way[tunnel][tunnel!=no][bridge][bridge!=no] {
  group: tr("kaart (MX/BR)");
  throwWarning: tr("Please check if this is both a bridge and a tunnel");
  assertMatch: "way tunnel=yes bridge=yes";
  assertNoMatch: "way tunnel=yes bridge=no";
  assertNoMatch: "way tunnel=no bridge=yes";
  assertNoMatch: "way tunnel=no bridge=no";
}

way > node { set .is_in_way }
node[number_of_tags() = 0]!.is_in_way {
  group: tr("kaart (MX/BR)");
  throwError: tr("Unconnected nodes without physical tags");
  fixDeleteObject: this;
  assertMatch: "node";
  assertNoMatch: "node name=Test";
}
